#!/bin/bash

##  This first argument contains the name of the variables file.
##      We also define the modified variables file where we'll
##      write them after parsing them from the file called '$1'
modvarfile=$1.mod

##  We parse the vars into lines of key=value pairs to modvarfile
invars=`cat $1 | sed 's/\s\+\([a-zA-Z_]\+=\)/\n\1/g' > $modvarfile`

##  We search the modvarfile for the values we seek
##  with regex to strip of everything before = and all whitespace at the end
OBJECT=`grep ^object $modvarfile | sed 's/^.*=\|\s\+$//g'`
CONDITION=`grep ^condition $modvarfile | sed 's/^.*=\|\s\+$//g'`

##  Failed does not have a true/false.  By simply declaring the field
##      of failed, the word itself triggers a fail (regardless of true or false)
FAILED_MATCH="jzJZ"
if [[ $CONDITION =~ [$FAILED_MATCH] ]]; then
    display="The condition $CONDITION contains $FAILED_MATCH and therefore will report a failure unless you are ignoring them"
    printf "{\"failed\": true, \"msg\": \"$display\"}"
    exit 1
fi

##  object aeiouyAEIOUY causes a change output
CHANGE_MATCH="aeiouyAEIOUY"
if [[ $OBJECT =~ [$CHANGE_MATCH] ]]; then
    display="The object $OBJECT contains $CHANGE_MATCH and therefore will report a change"
    printf "{\"changed\": true, \"msg\": \"$display\"}"
    exit 0
fi

### Changed is a required field to return, even if false
display="No changes were required"
printf "{\"changed\": false, \"msg\": \"$display\"}"
exit 0
