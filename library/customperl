#!/usr/bin/perl
@vars = &get_var_array(@ARGV[0]);	## Ansible feeds the vars temp file name in as ARG 0


########################################################################
#######  WE SPECIFY ALL THE VARIABLES FOR WHICH WE WANT A VALUE  #######
########################################################################
$object = &get_value("object");
$condition = &get_value("condition");
$msg = "The object is $object and the condition is $condition";
########################################################################



########################################################################
#######     WE PUSH INDIVIDUAL LINES TO THE RESULTS SECTION      #######
########################################################################
push(@resultsitems, "This is a line that goes into results");
push(@resultsitems, "And so is this");
########################################################################



########################################################################
#######                 CHANGE LOGIC GOES HERE                   #######
########################################################################
if ($object =~ /[aeiouyAEIOUY]/){
	$is_changed++;
	$thismsg = "a vowel in the object marks it as CHANGED";
	$msg .= ", but $thismsg";
	push(@resultsitems, $thismsg);
}

if ($is_changed){		## Out of all the above logic, we evaluate this as a single stat
	$changemsg = '"changed": "true", '; 
}else{
	push(@resultsitems, "no change was found");
}
########################################################################



########################################################################
#######                  FAIL LOGIC GOES HERE                    #######
########################################################################
if ($condition =~ /[jzJZ]/){
	$is_failed++;
	$thismsg = "the characters j or z in status mark it as FAILED";
	$msg .= ", failed due to inappropriate condition letters";
	push(@resultsitems, $thismsg);
}
if ($condition =~ /grumpy|angry|snarky/i){
	$is_failed++;
	$thismsg = "grumpy, snarky, angry make this fail";
	$msg .= ", failed due to a bad condition attitude";
	push(@resultsitems, $thismsg);
}

if ($is_failed){		## Out of all the above logic, we evaluate this as a single stat
	$failmsg = '"failed": "true", ' 
}else{
	push(@resultsitems, "no failure was found");
}
########################################################################



########################################################################
#######             CHECK MODE LOGIC GOES HERE                   #######
########################################################################
if (&get_bool("_ansible_check_mode")){
	$checkmsg =  '"check_mode": "true", ';
}else{
	## We would execute destructive things here that should not run in check mode
}
########################################################################



########################################################################
###   WE PARSE THE ARRAY OF ALL ITEMS WE WANT IN THE RESULTS FIELD   ###
########################################################################
if (length(@resultsitems > 0)){
	foreach $resultsitem(@resultsitems){
		$resultspayload .= "\"$resultsitem\",";
	}
	$resultspayload =~ s/,$//g;
$resultsmsg=<<ALLDONE;
        "results": [ $resultspayload ]
ALLDONE
}
########################################################################



########################################################################
###   THIS IS WHERE WE PRINT THE FINAL JSON OUTPUT BACK TO ANSIBLE   ###
########################################################################
print<<ALLDONE;
{$changemsg$failmsg$checkmsg"msg": "$msg",$resultsmsg}
ALLDONE
########################################################################



########################################################################
########################################################################
########################################################################
########         EVERYTHING BELOW HERE IS A SUBROUTINE          ########
########################################################################
########################################################################
########################################################################


##### SUBROUTINE TO GATHER VALUE OF AN ITEM
sub get_value{
	my $in = shift(@_);
	foreach $line(@vars){
		($var,$val) = split(/=/,$line);
		return $val if ($var eq $in);
	}
#	return "NULL";
	return;
}

##### SUBROUTINE TO GET BOOLEAN VALUE OF AN ITEM
sub get_bool{
	my $in = shift(@_);
	foreach $line(@vars){
		($var,$val) = split(/=/,$line);
		if ($var eq $in){
			if ($val =~ /^true$/i){
				return 1;
			}else{
				return 0;
			}
		}
	}
	return;
}

##### SUBROUTINE TO PARSE INBOUND VARIABLES
sub get_var_array{
	my ($line,$var,$val,$outarray);			# we reserve some exclusive vars so that Perl doesn't freak out
	my $infile = shift(@_);				# take the variable fed into this subroutine
	my $input = `cat $infile`;			# pull the contents from the file name provided
	system("cp -p $infile /tmp/args.txt");		# for testing purposes, we can view this file and see what vars were passed
	my $indata = "  $input  ";			# pad with some spaces so our regex works nicely
	$indata =~ s/\s+([a-z0-9A-Z_]+=)/\n$1/g;	# mildly complex regex to convert unstructured data to newline pairs
	foreach $line(split(/\n/,$indata)){		# split each key value pair 1 per line
		$line =~ s/^\s+|\s+$//g;		# strip off the extra whitespace on the ends of each pair
		next if ($line !~ /=|[a-zA-Z]/);	# ignore lines that are not a proper key value pair
		push(@outarray, $line);
	}
	return @outarray;
}
